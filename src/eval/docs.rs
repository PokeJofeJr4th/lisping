use std::collections::HashMap;

pub fn docs() -> HashMap<String, String> {
    HashMap::from([
        ("+".to_string(),"Calculate the sum of the arguments".to_string()),
        ("-".to_string(),"Calculate the difference between arguments. One argument calculates the negative.".to_string()),
        ("*".to_string(),"Calculate the product of the arguments.".to_string()),
        ("/".to_string(),"Calculate the ratio between two arguments.".to_string()),
        ("=".to_string(),"Check if two values are equal".to_string()),
        ("<".to_string(),"Check if one numerical value is less than antother".to_string()), 
        ("<=".to_string(),"Check if one numerical value is less than or equal to another".to_string()),
        (">".to_string(),"Check if a numerical value is greater than another".to_string()),
        (">=".to_string(),"Check if a numerical value is greater than or equal to another".to_string()),
        ("print".to_string(),"Print the arguments to stdout".to_string()),
        ("input".to_string(),"Read a line of input from stdin".to_string()),
        ("type".to_string(),"Get the type of a value, as a symbol".to_string()),
        ("str".to_string(),"Concatenate the arguments into a string".to_string()),
        ("symbol".to_string(),"Convert a string to a symbol".to_string()),
        ("chr".to_string(),"Convert an integer to its corresponding character in UTF-8".to_string()),
        ("int".to_string(),"Convert a string to an int".to_string()),
        ("nth".to_string(),"Get the nth value of a sequence".to_string()),
        ("first".to_string(),"Get the first value of a sequence.".to_string()),
        ("last".to_string(),"Get the last value of a sequence.".to_string()),
        ("rest".to_string(),"Get a copy of a list without its first value".to_string()),
        ("eval".to_string(),"Evaluate a given expression as code".to_string()),
        ("apply".to_string(),"Apply the given function using the given arguments.".to_ascii_lowercase()),
        ("macro".to_string(),"Convert a function to a macro. The function's input is the syntax provided in the macro ".to_string()),
        ("assoc".to_string(),"Return a table with the additional keys and values combined with the original".to_string()),
        ("dissoc".to_string(),"Return a table without the specified keys".to_string()),
        ("get".to_string(),"Get the value associated with a given key in a table".to_string()),
        ("keys".to_string(),"Get a table's keys as a sequence".to_string()),
        ("values".to_string(),"Get a table's values as a sequence".to_string()),
        ("contains?".to_string(),"Check if a table contains a key".to_string()),
        ("findall?".to_string(),"Search a string for all non-overlapping matches to a regular expression".to_string()),
        ("cons".to_string(),"Prepent the given value to the given list".to_string()),
        ("count".to_string(),"Find the size of a sequence".to_string()),
        ("set!".to_string(),"Set the value inside an atom, returning the original value".to_string()),
        ("atom".to_string(),"Create a new atom with the given value inside it".to_string()),
        ("inspect!".to_string(),"Modify the value in the atom with a function".to_string()),
        ("\\".to_string(),"Create a lambda function that accepts the given parameters and returns the result of evaluating the body expression".to_string()),
        ("if".to_string(),"If the first value is truthy, evaluate and return the second value. Otherwise, evaluate and return the third value.".to_string()),
        ("quote".to_string(),"Return the arguments without evaluating them".to_string()),
        ("quasiquote".to_string(),"Return the arguments, only evaluating the parts within a (unquote ...) expression".to_string()),
        ("err".to_string(),"Throw an error with the provided information. The first argument is not evaluated and should be an identifier.".to_string()),
        ("let*".to_string(),"The first argument is an alternating list of patterns and values. Each value is evaluated in order and bound to its corresponding pattern. Returns the result of evaluating the second argument with the context of the bindings created from the first argument.".to_string()),
        ("def!".to_string(),"Define a variable, providing its name and a value".to_string()),
        ("try*".to_string(),"Attempt to evaluate the first argument. If an exception is thrown, goes to each catch block to recover".to_string()),
        ("doc".to_string(),"Attach documentation to the next value that is defined".to_string()),
        ("help".to_string(),"Retrieve the documentation for a function".to_string()),
    ])
}
